#!/bin/bash

# This is simple hack to embeed GPG clear signature to PDF file.
#
# Such signed PDF files can be easily verified by $gpg --verify file.pgp.asc.pdf
#
#
######### How this works?
#
# gpg --clearsign substitutes "\n-" with "\n- -", which mess content
# quite often. Sometimes it's better to substitute "\n-" patterns with
# something different before clearsign kicks-in. This simple script substitutes
# such patterns before clearsigning
# 
# Please be aware, that this can mess-up contents of your PDF, so try
# different substitution pattern by flipping bits, and checking if your
# PDF is still readable, or try to adapt your document before signing.
# Usually this pattern is used to mark default color of text, so try to
# change style of "Default" font from "Automatic" to "Black".
#
#
#                                                      d3llf, wolf128058

usage(){
    cat <<EOF
gpg-sign-pdf.

Usage:
    gpg-sign-pdf -k <gpg_key> -i <input_pdf> -o <output_pdf>

Options:
    -i <input_pdf>   The PDF document you want to sign
    -o <output_pdf>  The output file name
    -k <gpg_key>     The gpg-key to use for signing
EOF
    exit "$1"
}

while getopts :hi:o:k: flag
do
    case "${flag}" in
        i ) INPUT_FNAME="${OPTARG}";;
        o ) OUTPUT_FNAME="${OPTARG}";;
        k ) GPG_KEY="${OPTARG}";;
        h ) usage 0 ;;
        * ) usage 1 ;;
    esac
done

# ------------------------------------------------------------------------------------------

if [ -z $INPUT_FNAME ]; then
 usage 1
fi

if [ -z $OUTPUT_FNAME ]; then
 OUTPUT_FNAME="$(basename -s .pdf $INPUT_FNAME).signed.pdf"

fi

if [ -z $GPG_KEY ]; then
 GPG_KEY="$(gpg -K | grep sec | tail -1 | tr -s " " | cut -f 2 -d" " | cut -f 2 -d/)"
fi

if [ ! $(which xxd) ]; then
 echo "No xxd found."
 exit 1
fi

# ----------

cp $INPUT_FNAME $OUTPUT_FNAME


# Substitute "\n-"

SUB_PAT="s/\s0a2d\s/2a2d/g"

xxd $OUTPUT_FNAME > "$OUTPUT_FNAME".xxd
sed -e "$SUB_PAT" < "$OUTPUT_FNAME".xxd > "$OUTPUT_FNAME".newline.xxd
xxd -r "$OUTPUT_FNAME".newline.xxd > $OUTPUT_FNAME
rm "$OUTPUT_FNAME".xxd "$OUTPUT_FNAME".newline.xxd

# Append your public key to pdf

gpg --export -a $GPG_KEY >> $OUTPUT_FNAME

# Clearsign your document

gpg --local-user $GPG_KEY --clearsign $OUTPUT_FNAME
mv "$OUTPUT_FNAME".asc $OUTPUT_FNAME
